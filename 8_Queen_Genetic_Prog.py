import random
import numpy as np
from numpy.random import choice
import pandas as pd
import math
import time

class GeneticCompute:
    # Initialing variables for Genetic programming for N Queens problem
    def __init__(self, i_target_Seq):
        self.populationData=[]
        self.fitnessData=[]
        self.probabilityDist = []
        self.probDataFrame=()
        self.mutationRate = .03
        self.initialPopulation = 200
        self.MaxGenerations=2000
        self.crossOver = 0.5
        # Possible numbers list 
        self.num_list = [x for x in range(len(i_target_Seq))] 
        self.target_seq=i_target_Seq
        """
        print("Inital Random Polulation : ", self.initialPopulation)  
        print("")
        print("Crossover : ", self.crossOver)
        print("")
        print("Mutation : ", self.mutationRate*100,"%")
        print("")
        print("Maximum generation set for this program : ",self.MaxGenerations)
        print("")
        print("")
        print("Computing Genetic Algorithm for 8 Queens problem. Please wait...")
        print("")
        time.sleep(3)
        """
    # Function to calculate Fitness Score
    def getFitnessScore(self,data):    
        fitnessScore = 0
        for inloop in range(len(self.target_seq)):
            if (data[inloop] == self.target_seq[inloop]):
                fitnessScore = fitnessScore + 1
        return fitnessScore
    
    
    # Initialing Population with Randon Sequence
    def initializing_population(self):        
        get_random = random.SystemRandom()
        
        for outloop in range(self.initialPopulation):
            randomData = []
            fitnessScore = 0
            for inloop in range(len(self.target_seq)):
                randomData.append(get_random.choice(self.num_list))
            fitnessScore=self.getFitnessScore(randomData)
            self.populationData.append(randomData) 
            self.fitnessData.append(fitnessScore)
        #print(self.populationData)
        self.Calc_Probability()
        self.update_problemDF()
        
    #Creating and updating DataFrame based on the Population set
    def update_problemDF(self):
        self.probDataFrame = pd.DataFrame({'Queens':self.populationData,'FitnessScore':self.fitnessData,'Probability':self.probabilityDist})
        self.probDataFrame = self.probDataFrame.sort_values(['Probability'],ascending=False)
        self.probDataFrame = self.probDataFrame.reset_index(drop=True)
        
    # Function to calulate Probability of each dataset in poplulation    
    def Calc_Probability(self):
        self.probabilityDist.clear()
        #print("prob" , len(self.probabilityDist))
        for i in range(len(self.populationData)):
            self.probabilityDist.append(self.fitnessData[i]/len(self.target_seq))
        
        #print(self.probDataFrame)
    
    # This function will generate childs and validate them with solution
    def Generate_childs(self):
        crossOverPoint = int(self.crossOver*len(self.target_seq))  
        #print(self.probDataFrame)
        for loop in range(self.MaxGenerations):
            Parents=[]
            #Take first 2 parents with high Probability
            Parents.append(self.probDataFrame[0:1]["Queens"].values[0])
            Parents.append(self.probDataFrame[1:2]["Queens"].values[0])
            #Generate new child with both parent using crossover
            child = Parents[0][0:crossOverPoint]+Parents[1][crossOverPoint:]
            #Adding Mutation
            child=self.mutate_child(child)            
            # Appending Population list with new child
            self.populationData.append(child)
            if(self.match(child)):
                print(child)
                """
                print("***** Solution Found *****")
                print("Solution generated by Genetic Programming is ", child)
                print("And Exactly matched with the random picked solution from 8 Queens Problem(Non-Genetic method)")
                print("")
                print("Below are some other facts --")
                print("")
                print("Total Generations spent :" , loop+1, " Avg Fitness Score : ", self.probDataFrame["FitnessScore"].mean())                                
                """
                break                
            #Updating Population dataset with updated fitness score & probability             
            self.update_polulation()
            if(loop==self.MaxGenerations-1):
                print("Sorry, No solution found. Please try adjusting variables configured in class Initialization")
            
     
    def mutate_child(self,child):
            for i in range(len(child)):
                if(random.randint(1,100)<=int(self.mutationRate*100)):            
                    child[i] = random.randint(0,len(self.target_seq)-1)
            return child
    
        
    # Function to update population dataset & Problem DataFrame        
    def update_polulation(self):
         self.fitnessData.clear()
         #print(len(self.populationData))
         for items in self.populationData:
             self.fitnessData.append(self.getFitnessScore(items))
             #print(items)
         self.Calc_Probability()
         self.update_problemDF()
    
        
    # Function to match solution generated from Genetic programming with one right answer of 8 Queens puzzle
    def match(self,child):
        if(self.getFitnessScore(child)==len(self.target_seq)):
            return True
        return False
            
# Class to find and store possible solutions for N Queens puzzle
  

def main():       
    gc= GeneticCompute([2,4,6,0,3,1,7,5])
    gc.initializing_population()
    #GC.Calc_Probability()
    gc.Generate_childs()
    #print("")
    #print("***************************************************************************************")    
    
if __name__ == "__main__":    
    main()